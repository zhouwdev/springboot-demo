buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'

sourceCompatibility = 1.8
group 'springboot-demo'
//version '1.0'

[compileJava, compileTestJava]*.options*.encoding = "UTF-8"

repositories {
    maven {
        url "http://10.52.2.106:8081/repository/maven-public/"
    }
}

ext{
    springSession_version="1.0.2.RELEASE"
    collections_version="3.2.1"
    druid_version="1.0.10"
    mybatis_version="3.2.6"
    mybatis_spring_version="1.2.2"
    jackson_version="2.7.1"
    dom4j_version="1.6.1"
    commonscodec_version ="1.10"
    swagger_version="2.3.0"
    mysql_connector_version="5.1.29"
    aspectj_version="1.7.1"
}

dependencies {
          compile  "ch.qos.logback:logback-access"
          compile  "ch.qos.logback:logback-classic"
          compile  "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
          compile  "org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}"
          compile  "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
          compile  "org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}"
          compile  "org.slf4j:slf4j-api"
          compile  "org.slf4j:jcl-over-slf4j"
          compile  "commons-collections:commons-collections:${collections_version}"
          compile  "com.alibaba:druid:${druid_version}"
          compile  "org.mybatis:mybatis:${mybatis_version}"
          compile  "org.mybatis:mybatis-spring:${mybatis_spring_version}"
          compile  "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
          compile  "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
          compile  "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
          compile  "dom4j:dom4j:${dom4j_version}"
          compile  "commons-codec:commons-codec:${commonscodec_version}"
          compile  "io.springfox:springfox-swagger-ui:${swagger_version}"
          compile  "io.springfox:springfox-swagger2:${swagger_version}"
          compile  "org.springframework:spring-jdbc"
          compile  "org.aspectj:aspectjweaver:${aspectj_version}"
          compile  "org.springframework.session:spring-session:${springSession_version}"



    testCompile(
            "junit:junit:4.12",
            "org.gmock:gmock:0.8.3",
            "org.springframework.boot:spring-boot-starter-test"
    )

    configurations {
        mybatisGenerator
    }
    mybatisGenerator(
            "org.mybatis.generator:mybatis-generator-core:1.3.2",
            "mysql:mysql-connector-java:${mysql_connector_version}",
    )

    def getDbProperties = {
        def properties = new Properties()
        file("src/test/resources/db.properties").withInputStream { inputStream ->
            properties.load(inputStream)
        }
        properties;
    }

    task mybatisGenerate << {
        def properties = getDbProperties()
        ant.properties['targetProject'] = projectDir.path
        ant.properties['driverClass'] = properties.getProperty("mysql.driver")
        ant.properties['connectionURL'] = properties.getProperty("mysql.url")
        ant.properties['userId'] = properties.getProperty("mysql.username")
        ant.properties['password'] = properties.getProperty("mysql.password")

        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'src/test/resources/generatorConfig.xml', verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
            }
        }
    }
}

